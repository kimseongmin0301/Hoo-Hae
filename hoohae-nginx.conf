# HTTP -> HTTPS 리디렉션 설정
server {
    listen 80;
    server_name hoohae.com www.hoohae.com api.hoohae.com;

    return 301 https://$host$request_uri;
}

# hoohae.com 및 www.hoohae.com에 대한 SSL 설정
server {
    listen 443 ssl;  # SSL 포트
    server_name hoohae.com www.hoohae.com;

    ssl_certificate /etc/letsencrypt/live/hoohae.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/hoohae.com/privkey.pem;

    root /var/www/html;
    index index.html index.htm index.nginx-debian.html;

    location /.well-known/acme-challenge/ {
        root /var/www/html;
        allow all;
    }

    location / {
        proxy_pass http://localhost:3000; # Vue 개발 서버
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /ws {
        proxy_pass http://localhost:3000;  # WebSocket을 위한 주소
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
}
map $http_origin $cors_origin {
    default "";
#    "~^https?://(localhost|127\.0\.0\.1|172\.(1[6-9]|2[0-9]|3[0-1])\.\d{1,3}\.\d{1,3})(:\d+)?$" $http_origin;

    "https://hoohae.com" "https://www.hoohae.com";
    "http://hoohae.com" "http://hoohae.com";
}
server {
    listen 443 ssl;  # SSL 포트
    server_name api.hoohae.com;

    ssl_certificate /etc/letsencrypt/live/api.hoohae.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/api.hoohae.com/privkey.pem;

    location /.well-known/acme-challenge/ {
        root /var/www/api;  # Certbot의 webroot_path와 일치
        allow all;
    }

    location / {
        # Preflight 요청 처리
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' $http_origin always; # 요청 Origin에 따라
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization' always;
            #add_header 'Access-Control-Max-Age' 86400;  # 1일 (86400초)
            return 204;  # No Content
        }

        # API 서버로 요청 전
        proxy_pass http://localhost:39880;

        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-Host $server_name;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # CORS 헤더 추가 (OPTIONS 요청이 아닐 때)
  #      add_header 'Access-Control-Allow-Origin' $http_origin always; # 요청 Origin에 따라
 #       add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
#        add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization' always;
    }
}

# certbot 갱신
# 0 3 * * * certbot renew --quiet && systemctl reload nginx
